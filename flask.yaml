---
apiVersion: v1
kind: Service
metadata:
  name: flask-hello-world-service
spec:
  type: NodePort
  selector:
    app: flask-hello-world
  ports:
    - port: 5000
      targetPort: 5000
      nodePort: 27100
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: flask-hello-world-deployment
spec:
  replicas: 1
  selector:
    matchLabels:
      app: flask-hello-world
  template:
    metadata:
      labels:
        app: flask-hello-world
    spec:
      containers:
      - name: flask-hello-world
        image: bonvoyage/flask-hello-world:1.0.0
        #understanding flask application requests and limits using LOCUST - https://learnk8s.io/setting-cpu-memory-limits-requests
        resources:
          requests:
            memory: "16Mi"
            cpu: "25m"
          limits:
            memory: "128Mi"
            cpu: "250m"
        ports:
        - containerPort: 5000
        livenessProbe:
          httpGet:
            path: /health
            port: 5000
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
          successThreshold: 1
        # Readiness prob would have been checking another endpoint if I had one to see if the service is ready to serve traffic
        # e.g if we had a database such as mongo it would have pinged the db to see if its ready and then conclude that the container is ready to receive traffic
        # readinessProbe:
        #   exec:
        #     command:
        #     - mongo
        #     - --eval
        #     - db.adminCommand('ping')
        readinessProbe:
          httpGet:
            path: /
            port: 5000
          periodSeconds: 5
          timeoutSeconds: 5    
          failureThreshold: 3
          successThreshold: 1